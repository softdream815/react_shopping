server {
    # Dynamic image resizing
  	server_name localhost;
  	listen 8888;
  	location ~ "^/resize/(?<entity>\w+)/(?<id>\w+)/(?<width>\d+)/(?<file>.+)$" {
    			alias /var/www/cezerin/public/uploads/$entity/$id/$file;
    			image_filter_buffer 20M;
    			image_filter_jpeg_quality 85;
    			image_filter_interlace on;
    			image_filter resize $width -;
  	}
}

# Cache rule for resized images
proxy_cache_path /tmp/nginx-images-cache/ levels=1:2 keys_zone=images:10m inactive=30d max_size=5g use_temp_path=off;

server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    server_name store.cezerin.com;

    ssl_certificate         /etc/letsencrypt/live/store.cezerin.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/store.cezerin.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/store.cezerin.com/fullchain.pem;
    ssl_dhparam             /etc/ssl/certs/dhparam.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_buffer_size 4k;

    gzip              on;
    gzip_comp_level   2;
    gzip_min_length   1000;
    gzip_vary         on;
    gzip_proxied      expired no-cache no-store private auth;
    gzip_types        application/x-javascript application/javascript application/xml application/json text/xml text/css text/javascript text/plain;

    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout 15;
    send_timeout 10;

    server_tokens off;
    expires 1y;
    add_header Strict-Transport-Security max-age=31536000;

    root /var/www/cezerin/public;

    location /admin {
            # Dashboard single page application
            # alias /var/www/cezerin/public/admin/;
            client_max_body_size 500M;
            try_files $uri index.html /index.html;
    }

    location ~ "^/static/(?<entity>\w+)/(?<id>\w+)/(?<file>[^\/]+)$" {
            # Get static file without modification
            access_log off;
            log_not_found off;
  		      alias /var/www/cezerin/public/uploads/$entity/$id/$file;
  	}

	  location ~ "^/static/(?<entity>\w+)/(?<id>\w+)/(?<width>\d+)/(?<file>.+)$" {
  	        # Proxy to internal image resizing server
  	        proxy_pass http://localhost:8888/resize/$entity/$id/$width/$file;
  	        proxy_cache images;
  	        proxy_cache_valid 200 30d;
            access_log off;
            log_not_found off;
    }

    location /static/files/ {
            access_log off;
            log_not_found off;
            alias /var/www/cezerin/public/uploads/files/;
    }

    location /static {
            # Nginx needs you to manually define DNS resolution when using
            # variables in proxy_pass. Creating this dummy location avoids that.
            # The error is: "no resolver defined to resolve localhost".
            proxy_pass http://localhost:8888;
    }

    location / {
            try_files $uri @proxy;
    }

    location @proxy {
            # Proxy to NodeJS
            expires off;
            proxy_pass       http://localhost:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
    }
}
